[{"categories":null,"content":"linux ","date":"2022-12-17","objectID":"/fourth_post/:0:0","tags":null,"title":"linux学习记录（持续更新中～）","uri":"/fourth_post/"},{"categories":null,"content":"1、linux的引言 Linux是一套免费使用和自由传播的类Unix操作系统，是一个基于POSIX和Unix的多用户、多任务、支持多线程和多CPU的操作系统。伴随着互联网的发展，Linux得到了来自全世界软件爱好者、组织、公司的支持。它除了在服务器操作系统方面保持着强劲的发展势头以外，在个人电脑、嵌入式系统上都有着长足的进步。目前Linux存在着许多不同的Linux发行版本，但它们都使用了Linux内核。Linux可安装在各种计算机硬件设备中，比如手机、平板电脑、路由器、台式计算机。 ","date":"2022-12-17","objectID":"/fourth_post/:1:0","tags":null,"title":"linux学习记录（持续更新中～）","uri":"/fourth_post/"},{"categories":null,"content":"2、linux的诞生 20世纪80年代，计算机硬件的性能不断提高，PC的市场不断扩大，当时可供计算机选用的操作系统主要有Unix、DOS和MacOS这几种。Unix价格昂贵，不能运行于PC；DOS显得简陋，且源代码被软件厂商严格保密； MacOS是一种专门用于苹果计算机的操作系统。此时，计算机科学领域迫切需要一个更加完善、强大、廉价和完全开放的操作系统。由于供教学使用的典型操作系统很少，因此当时在荷兰当教授的美国人AndrewS.Tanenbaum编写了一个操作系统，名为MINIX，为了向学生讲述操作系统内部工作原理。MINIX虽然很好，但只是一个用于教学目的的简单操作系统，而不是一个强有力的实用操作系统，然而最大的好处就是公开源代码。全世界学计算机的学生都通过钻研MINIX源代码来了解电脑里运行的MINIX操作系统，芬兰赫尔辛基大学大学二年级的学生Linus Torvalds就是其中一个，在吸收了MINIX精华的基础上，Linus于1991年写出了属于自己的Linux操作系统，版本为Linux0.01，是Linux时代开始的标志。他利用Unix的核心，去除繁杂的核心程序，改写成适用于一般计算机的x86系统，并放在网络上供大家下载，1994年推出完整的核心Version1.0，至此，Linux逐渐成为功能完善、稳定的操作系统，并被广泛使用。 总结:Linux出现于1991年，是由芬兰赫尔辛基大学学生,Linus Torvalds和后来加入的众多爱好者共同开发完成。 ","date":"2022-12-17","objectID":"/fourth_post/:2:0","tags":null,"title":"linux学习记录（持续更新中～）","uri":"/fourth_post/"},{"categories":null,"content":"未完待续～ ","date":"2022-12-17","objectID":"/fourth_post/:3:0","tags":null,"title":"linux学习记录（持续更新中～）","uri":"/fourth_post/"},{"categories":null,"content":"前言 实现这个socket通信，我的方法是直接vim两个.c文件然后克隆一个终端，一个运行客户端，一个运行服务端，过程比较简单～ ","date":"2022-12-17","objectID":"/third_post/:0:0","tags":null,"title":"Socket通信","uri":"/third_post/"},{"categories":null,"content":"一、vim两个.c文件并且编译他们 其中client.c的代码： #include \u003cstdio.h\u003e #include \u003cstdlib.h\u003e #include \u003cerrno.h\u003e #include \u003cstring.h\u003e #include \u003cnetdb.h\u003e #include \u003csys/types.h\u003e #include \u003cnetinet/in.h\u003e #include \u003csys/socket.h\u003e #include \u003carpa/inet.h\u003e #include \u003cunistd.h\u003e int main(int argc,char *argv[]) { int sockfd,numbytes; char buf[BUFSIZ]; struct sockaddr_in their_addr; printf(\"break!\"); while((sockfd = socket(AF_INET,SOCK_STREAM,0)) == -1); printf(\"We get the sockfd~\\n\"); their_addr.sin_family = AF_INET; their_addr.sin_port = htons(8000); their_addr.sin_addr.s_addr=inet_addr(\"127.0.0.1\"); bzero(\u0026(their_addr.sin_zero), 8); while(connect(sockfd,(struct sockaddr*)\u0026their_addr,sizeof(struct sockaddr)) == -1); printf(\"connect return: %d\\n\", connect(sockfd,(struct sockaddr*)\u0026their_addr,sizeof(struct sockaddr))); printf(\"Get the Server~\\n\"); numbytes = recv(sockfd, buf, BUFSIZ,0);//接 收 服 务 器 端 信 息 buf[numbytes]='\\0'; printf(\"buf: %s\\n\",buf); while(1) { printf(\"Entersome thing:\"); scanf(\"%[^\\n]%*c\",buf); printf(\"scanf: %s\\n\", buf); numbytes = send(sockfd, buf, strlen(buf), 0); printf(\"send numbytes: %d\\n\", numbytes); numbytes=recv(sockfd,buf,BUFSIZ,0); printf(\"recv numbytes: %d\\n\", numbytes); buf[numbytes]='\\0'; printf(\"received:%s\\n\",buf); } close(sockfd); return 0; } serve.c的代码： #include \u003cstdio.h\u003e #include \u003cstdlib.h\u003e #include \u003cerrno.h\u003e #include \u003cstring.h\u003e #include \u003cnetdb.h\u003e #include \u003csys/types.h\u003e #include \u003cnetinet/in.h\u003e #include \u003csys/socket.h\u003e #include \u003carpa/inet.h\u003e #include \u003cunistd.h\u003e int main(int argc, char *argv[]) { int fd, new_fd, struct_len, numbytes,i; struct sockaddr_in server_addr; struct sockaddr_in client_addr; char buff[BUFSIZ]; server_addr.sin_family = AF_INET; server_addr.sin_port = htons(8000); server_addr.sin_addr.s_addr = INADDR_ANY; bzero(\u0026(server_addr.sin_zero), 8); struct_len = sizeof(struct sockaddr_in); fd = socket(AF_INET, SOCK_STREAM, 0); while(bind(fd, (struct sockaddr *)\u0026server_addr, struct_len) == -1); printf(\"Bind Success!\\n\"); while(listen(fd, 10) == -1); printf(\"Listening....\\n\"); printf(\"Ready for Accept,Waitting...\\n\"); new_fd = accept(fd, (struct sockaddr *)\u0026client_addr, \u0026struct_len); printf(\"accept return: %d\\n\", new_fd); printf(\"Get the Client~\\n\"); numbytes = send(new_fd,\"Welcome to my server\\n\",21,0); while((numbytes = recv(new_fd, buff, BUFSIZ, 0)) \u003e 0) { buff[numbytes] = '\\0'; printf(\"%s\\n\",buff); if(send(new_fd,buff,numbytes,0)\u003c0) { perror(\"write\"); return 1; } } close(new_fd); close(fd); } ","date":"2022-12-17","objectID":"/third_post/:1:0","tags":null,"title":"Socket通信","uri":"/third_post/"},{"categories":null,"content":"二、运行测试是否能够运行成功 如上图所示，运行成功～ ","date":"2022-12-17","objectID":"/third_post/:2:0","tags":null,"title":"Socket通信","uri":"/third_post/"},{"categories":null,"content":"三、上传到github远程仓库 具体步骤请到我的首页查看“在ubantu中安装和配置git”这篇文章。 ","date":"2022-12-17","objectID":"/third_post/:3:0","tags":null,"title":"Socket通信","uri":"/third_post/"},{"categories":null,"content":"前言 HUGO 是一套模版静态化的系统，了解其目录结构有助于创建我们的网站系统，下面我分享以下我的搭建过程，希望对大家有点帮助～ ","date":"2022-12-17","objectID":"/second_post/:0:0","tags":null,"title":"使用hugo搭建网站","uri":"/second_post/"},{"categories":null,"content":"一、hugo的安装与配置 安装hugo我是直接用的这条命令（截止这篇文章完结之时，这是最新的hugo版本） wget https://github.com/gohugoio/hugo/releases/download/v0.108.0/hugo_0.108.0_Linux-64bit.tar.gz 安装完成后需要解压 tar -zxf hugo_0.108.0_Linux-64bit.tar.gz 解压完成后使用这条命令查看是否安装成功 hugo version ","date":"2022-12-17","objectID":"/second_post/:1:0","tags":null,"title":"使用hugo搭建网站","uri":"/second_post/"},{"categories":null,"content":"二、开始使用hugo搭建网站 ","date":"2022-12-17","objectID":"/second_post/:2:0","tags":null,"title":"使用hugo搭建网站","uri":"/second_post/"},{"categories":null,"content":"1、创建我们的博客目录 hugo new site mysite ","date":"2022-12-17","objectID":"/second_post/:2:1","tags":null,"title":"使用hugo搭建网站","uri":"/second_post/"},{"categories":null,"content":"2、下载主题 去主题官网https://themes.gohugo.io,找到想要的主题，我的主题是LoveIt。 ","date":"2022-12-17","objectID":"/second_post/:2:2","tags":null,"title":"使用hugo搭建网站","uri":"/second_post/"},{"categories":null,"content":"3、创建我的第一篇文章 ","date":"2022-12-17","objectID":"/second_post/:2:3","tags":null,"title":"使用hugo搭建网站","uri":"/second_post/"},{"categories":null,"content":"4、在本地启动博客 在mysite目录下命令： hugo serve --buildDrafts 就可以去本地查看到自己的博客啦！ ","date":"2022-12-17","objectID":"/second_post/:2:4","tags":null,"title":"使用hugo搭建网站","uri":"/second_post/"},{"categories":null,"content":"5、在github上部署hugo 首先我们需要在github中创建一个仓库，名字必须为github的用户名+github.io为后缀(图片中警告的原因是我已经创建过这个仓库了)! 用hugo生成网页，托管到Github仓库中 hugo --theme=LoveIt --baseUrl=\"https://zhengqinjie11.github.io/\" --buildDrafts 注意:theme后面为主题的名字！且在执行完这条语句之后，会在当前目录下生成对应的public文件，最后我们需要将public推送至远程github！ ","date":"2022-12-17","objectID":"/second_post/:2:5","tags":null,"title":"使用hugo搭建网站","uri":"/second_post/"},{"categories":null,"content":"6、将public推送至远程github cd public git init git add . git commit -m \"push\" git branch -M main git remote add origin + .....git git push -u origin main 如图，public推送成功！ 在github上也可以看见推送成功的文件，如图： 现在我们可以访问我们刚刚部署的网站了，访问zhengqinjie11.github.io ","date":"2022-12-17","objectID":"/second_post/:2:6","tags":null,"title":"使用hugo搭建网站","uri":"/second_post/"},{"categories":null,"content":"前言 这是我个人使用ubantu安装和配置git的方法，很方便，安装的版本也比较新，供大家参考～（大部分截图由于未保存丢失，故用代码代替） ","date":"2022-12-17","objectID":"/first_post/:0:0","tags":null,"title":"在ubantu中安装和配置git","uri":"/first_post/"},{"categories":null,"content":"一、git的安装 ","date":"2022-12-17","objectID":"/first_post/:1:0","tags":null,"title":"在ubantu中安装和配置git","uri":"/first_post/"},{"categories":null,"content":"使用apt安装git 安装非常直接，仅仅以sudo权限用户身份运行下面的命令： 再运行git命令，打印 Git 版本，验证安装过程，如下图： 这样子git就安装成功啦！ ","date":"2022-12-17","objectID":"/first_post/:1:1","tags":null,"title":"在ubantu中安装和配置git","uri":"/first_post/"},{"categories":null,"content":"二、配置git ","date":"2022-12-17","objectID":"/first_post/:2:0","tags":null,"title":"在ubantu中安装和配置git","uri":"/first_post/"},{"categories":null,"content":"1、创建github账号 首先我们需要到https://github.com/上面注册一个属于自己的账号，如图 ","date":"2022-12-17","objectID":"/first_post/:2:1","tags":null,"title":"在ubantu中安装和配置git","uri":"/first_post/"},{"categories":null,"content":"2、配置用户名和用户邮箱 git config –global user.name “lingyuanyousa” git config –global user.email “2996298542@qq.com” ","date":"2022-12-17","objectID":"/first_post/:2:2","tags":null,"title":"在ubantu中安装和配置git","uri":"/first_post/"},{"categories":null,"content":"3、配置git的私匙和公匙 ssh-keygen -t rsa -C “2996298542@qq.com” 其中密码设置为空，再按照指引做就好。 上github打开个人设置，点击new ssh kew，如图： 终端打开id_rsa.pub文件，复制密钥到github上： 回到终端测试是否连接成功（如图，已经连接成功）： ","date":"2022-12-17","objectID":"/first_post/:2:3","tags":null,"title":"在ubantu中安装和配置git","uri":"/first_post/"},{"categories":null,"content":"4、github创建项目 github创建项目，将远程仓库与本地仓库连接起来（点击new）： 随后你就可以上传你想上传的文件啦，使用命令： git init 初始化项目 git add . 将当前目录下的文件添加到仓库（缓冲区） git commit -m “init project” 提交到本地仓库 git push -u origin master 推送到远程仓库 ","date":"2022-12-17","objectID":"/first_post/:2:4","tags":null,"title":"在ubantu中安装和配置git","uri":"/first_post/"},{"categories":null,"content":"三、我的第一、二步的作业结果截图： ","date":"2022-12-17","objectID":"/first_post/:3:0","tags":null,"title":"在ubantu中安装和配置git","uri":"/first_post/"},{"categories":null,"content":"一、安装nginx 使用命令 sudo apt-get install nginx 随后使用命令nginx -v查看是否成功 随后开启nginx服务： service nginx start 最后通过ifconfig查看ip地址，然后在浏览器输入ip地址，就可以查到下图所示网页啦 二、hugo与nginx的结合使用 很遗憾，这一步我并没有办法完成，我会继续努力学习相关知识，最终完善它…… ","date":"2022-12-17","objectID":"/fifth_post/:0:0","tags":null,"title":"安装nginx并使用nginx将hugo静态网站配置到web","uri":"/fifth_post/"}]